{"version":3,"sources":["components/RestaurantRow.js","components/GetResults.js","App.js","index.js"],"names":["RestaurantRow","props","restaurantData","JSON","parse","localStorage","getItem","currentRestaurant","find","obj","name","restaurant","_useState","useState","checked","_useState2","Object","slicedToArray","setChecked","console","log","react_default","a","createElement","id","style","backgroundColor","type","display","onChange","setItem","stringify","color","className","GetResults","rows","setRows","requestObj","location","window","google","maps","LatLng","latLng","radius","service","places","PlacesService","document","getElementById","rowContainer","useEffect","nearbySearch","results","status","pagination","restaurants","forEach","data","newRestaurant","key","place_id","some","hasRestaurant","push","createRow","components_RestaurantRow","searchService","App","setLatLng","input","autocomplete","Autocomplete","types","componentRestrictions","country","autocompleteListener","addListener","place","getPlace","geometry","lat","lng","removeListener","components_GetResults","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.1ebc7a58.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst RestaurantRow = (props) => {\n  let restaurantData = JSON.parse(localStorage.getItem('restaurants'))\n  let currentRestaurant = restaurantData.find(obj => obj.name === props.restaurant.name)\n  const [checked, setChecked] = useState(currentRestaurant.checked)\n  const onCheckChange = () => {\n    if (checked) {\n      currentRestaurant.checked = !checked\n      localStorage.setItem('restaurants', JSON.stringify(restaurantData))\n      setChecked(!checked)\n    } else {\n      currentRestaurant.checked = !checked\n      localStorage.setItem('restaurants', JSON.stringify(restaurantData))\n      setChecked(!checked)\n    }\n  }\n  \n  // Get details of active restaurant\n  //const displayDetails = () => {\n    //if (!restaurantData.address) {\n      //let request = {\n        //placeId: restaurantData.id,\n        //fields: ['formatted_address', 'formatted_phone_number']\n      //}\n      //props.service.getDetails(request, (place) => {\n        //restaurantData.address = place.formatted_address\n        //restaurantData.phone = place.formatted_phone_number\n        //localStorage.setItem(restaurantData.name, JSON.stringify(restaurantData))\n      //})\n    //}\n  //}\n\n  console.log('RestaurantRow.js rendered')\n  return (\n    <label>\n      <div id=\"restaurantRow\" style={{'backgroundColor': checked ? \"#aaa\": \"white\"}}>\n        <input type=\"radio\" id={restaurantData.id} name=\"rowRadio\" style={{display: \"none\"}}/>\n        <input type=\"checkbox\" id=\"rowCheckbox\" onChange={onCheckChange} checked={checked}/>\n        \n        <h3 id=\"rowHeader\" style={{'color': checked ? '#666':'black'}}>\n          {props.restaurant.name}\n        </h3>\n        \n        {checked && <h3 className=\"been-here\">BEEN HERE</h3>}\n      </div>\n    </label>\n  )\n}\n\nexport default RestaurantRow","import React, { useState, useEffect } from 'react'\nimport RestaurantRow from './RestaurantRow'\n\nconst GetResults = (props) => {\n  const [rows, setRows] = useState()\n  let mylocation = new window.google.maps.LatLng(props.latLng[0], props.latLng[1])\n  const radius = 30\n  let requestObj = {\n    location: mylocation,\n    radius: radius,\n    type: [ 'restaurant' ],\n  }\n\n  const service = new window.google.maps.places.PlacesService(document.getElementById('google-data'))\n    let rowContainer = []\n    useEffect(() => {\n      service.nearbySearch(requestObj, (results, status, pagination) => {\n        if (status !== 'OK') return\n        let restaurants = JSON.parse(localStorage.getItem('restaurants')) || []\n        results.forEach((data) => {\n          let newRestaurant = {\n            key: data.id,\n            name: data.name,\n            id: data.place_id,\n            checked: false\n          }\n          const hasRestaurant = (newRestaurant, restaurants) => {\n            return restaurants.some((restaurant) => restaurant.id === newRestaurant.id)\n          }\n          if (!hasRestaurant(newRestaurant, restaurants)) {\n            restaurants.push(newRestaurant)\n          }\n          let createRow = <RestaurantRow key={newRestaurant.id} searchService={service} restaurant={newRestaurant}/>\n          rowContainer.push(createRow)\n        })\n\n        localStorage.setItem('restaurants', JSON.stringify(restaurants))\n        setRows(rowContainer)\n      })\n    }, [props.latLng])\n\n  console.log('GetResults.js rendered')\n  return (\n    <div>\n      {rows}\n    </div>\n  )\n}\n\nexport default GetResults","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport GetResults from './components/GetResults'\n\nconst App = () => {\n  const [latLng, setLatLng] = useState([41.7962928, -88.19741479999999])\n  useEffect(() => {\n    const input = document.getElementById('autocomplete')\n    const autocomplete = new window.google.maps.places.Autocomplete(input, \n      {types: ['(regions)'], componentRestrictions: {country: 'US'}})\n    const autocompleteListener = autocomplete.addListener('place_changed', () => {\n      let place = autocomplete.getPlace()\n      if (!place.geometry) {\n        // Not needed atm\n        return\n      }\n      let latLng = [place.geometry.location.lat(), place.geometry.location.lng()]\n      setLatLng(latLng)\n    })\n    return () => autocomplete.removeListener(autocompleteListener)\n  }, [])\n\n  console.log('App.js rendered')\n  return (\n    <div className=\"App\">\n      <GetResults latLng={latLng}/>\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}